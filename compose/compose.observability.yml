services:
  loki:
    image: grafana/loki:2.9.4
    labels:
      - app=loki
      - logs_scrape=false
    restart: unless-stopped
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - ../observability/loki/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    networks: [ backend ]
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:3100/ready" ]
      interval: 30s
      timeout: 5s
      retries: 3

  alloy:
    image: grafana/alloy:v1.10.2
    labels:
      - app=alloy
    restart: unless-stopped
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    environment:
      DOMAIN: ${DOMAIN}
    volumes:
      - ../observability/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/log/caddy:/var/log/caddy:ro
      - alloy_data:/var/lib/alloy
      - geoipupdate_data:/usr/share/GeoIP:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [ backend ]
    depends_on: [ loki, geoipupdate ]
    read_only: true

  grafana:
    image: grafana/grafana:10.4.5
    labels:
      - app=grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: https://${DOMAIN}/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    networks: [ backend ]
    volumes:
      - grafana_data:/var/lib/grafana
      - ../observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    read_only: true

  geoipupdate:
    image: ghcr.io/maxmind/geoipupdate:v7.1.1
    labels:
      - app=geoipupdate
    restart: unless-stopped
    environment:
      GEOIPUPDATE_ACCOUNT_ID: ${GEOIPUPDATE_ACCOUNT_ID}
      GEOIPUPDATE_LICENSE_KEY: ${GEOIPUPDATE_LICENSE_KEY}
      GEOIPUPDATE_EDITION_IDS: GeoLite2-City
      GEOIPUPDATE_FREQUENCY: 3
    networks: [ backend ]
    volumes:
      - geoipupdate_data:/usr/share/GeoIP
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /usr/share/GeoIP/GeoLite2-City.mmdb ] || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 10

  prometheus:
    image: prom/prometheus:v3.5.0
    labels:
      - app=prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=30d
    networks: [ backend ]
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:9090/-/ready" ]
      interval: 30s
      timeout: 5s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    restart: unless-stopped
    networks: [ backend ]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  node-exporter:
    image: prom/node-exporter:v1.9.1
    restart: unless-stopped
    pid: host
    networks: [ backend ]
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)'
